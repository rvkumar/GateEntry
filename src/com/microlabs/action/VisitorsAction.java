/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.microlabs.action;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.microlabs.db.ConnectionFactory;
import com.microlabs.db.VisitorsDB;
import com.microlabs.form.VisitorsForm;
import com.microlabs.utils.MicrolabsUtils;


/** 
 * MyEclipse Struts
 * Creation date: 01-30-2013
 * 
 * XDoclet definition:
 * @struts.action path="/visitors" name="visitorsForm" input="/jsp/visitors.jsp" parameter="method" scope="request" validate="true"
 * @struts.action-forward name="display" path="/jsp/visitoradd.jsp"
 */
public class VisitorsAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	public ActionForward modifyvisitor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		Connection geconn = null;
		String visitorId = request.getParameter("visitorno");
		
		String sql_modifyvisitor = "Select * from GE_VISITORS as A, GE_VISPURPOSE as B, GE_VISTYPE as C, GE_DEPT as D where VISITOR_NO = 'ab' and "+
		"A.VIS_PURPOSE_ID = B.VIS_PURPOSE_ID and A.VIS_TYPE_ID = C.VIS_TYPE_ID and A.DEPT_ID = D.DEPT_ID";
		
		String updateSQL = "update ge_visitors set time_out = getdate() where visitor_no = " + visitorId;
		System.out.println(updateSQL);
		
		try {
			geconn = ConnectionFactory.getConnection();			
			geconn.createStatement().execute(updateSQL);
			/*
			ResultSet rs = st.executeQuery(sql_modifyvisitor);
		
			ArrayList ary_visitors = new ArrayList();
			
			VisitorsForm visitorsForm1 =null;
			while(rs.next()) {
				visitorsForm1=new VisitorsForm();
				visitorsForm1.setVisName(rs.getString("VISITOR_NAME"));
				visitorsForm1.setVisCompany(rs.getString("COMPANY"));
				visitorsForm1.setVisPlace(rs.getString("PLACE"));				
				visitorsForm1.setTimeIn(rs.getString("TIME_IN"));
				visitorsForm1.setTimeOut(rs.getString("TIME_OUT"));
				visitorsForm1.setVisPurpose(rs.getString("VIS_PURPOSE_NAME"));
				visitorsForm1.setVisType(rs.getString("VIS_TYPE_NAME"));
				visitorsForm1.setToMeet(rs.getString("TO_MEET"));
				visitorsForm1.setDeptType(rs.getString("DEPT_NM"));
				visitorsForm1.setVisitorno(rs.getInt("VISITOR_NO"));
				
				ary_visitors.add(visitorsForm1);
				
			}
			//visitorsForm1.setAry_visitors(ary_visitors);
			request.setAttribute("disvisitors", ary_visitors);
			*/
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			if (geconn != null) {
				ConnectionFactory.closeConnection(geconn);
				geconn = null;
			}
		}
		
		
		return display(mapping, form, request, response);
	}
	

	public ActionForward viewvisitor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		VisitorsForm visitorsForm = (VisitorsForm) form;
		Connection geconn = ConnectionFactory.getConnection();			
		
		String visnam = request.getParameter("id");		
		String sql_viewvisitors = "Select * from GE_VISITORS as A, GE_DEPT as B, GE_VISTYPE as C, GE_VISPURPOSE as D where VISITOR_NAME = '"+visnam+"'"+
		" and A.DEPT_ID = B.DEPT_ID and A.VIS_TYPE_ID=C.VIS_TYPE_ID and A.VIS_PURPOSE_ID=D.VIS_PURPOSE_ID";
		
		try {
			Statement st = geconn.createStatement();
			ResultSet rs = st.executeQuery(sql_viewvisitors);

			while(rs.next()) {
				System.out.println("name" + rs.getString("VISITOR_NAME"));

				visitorsForm.setVisitorno(rs.getInt("VISITOR_NO"));
				visitorsForm.setVisName(rs.getString("VISITOR_NAME"));
				visitorsForm.setVisCompany(rs.getString("COMPANY"));
				visitorsForm.setAddress(rs.getString("ADDRESS"));
				visitorsForm.setVisPlace(rs.getString("PLACE"));
				visitorsForm.setBelongings(rs.getString("BELONGINGS"));
				visitorsForm.setToMeet(rs.getString("TO_MEET"));
				visitorsForm.setTimeIn(rs.getString("TIME_IN"));
				visitorsForm.setTimeOut(rs.getString("TIME_OUT"));
				visitorsForm.setVisitorimage(rs.getString("VISITOR_IMAGE"));
		
				visitorsForm.setDeptType(rs.getString("DEPT_NM"));
				visitorsForm.setVisType(rs.getString("VIS_TYPE_NAME"));
				visitorsForm.setVisPurpose(rs.getString("VIS_PURPOSE_NAME"));
			
			}
		
	} catch (SQLException e) {
		e.printStackTrace();
	}
			

		
			return mapping.findForward("viewvisitor");
	}

	
	public ActionForward displayvisitors(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		VisitorsForm visitorsForm = (VisitorsForm) form;// TODO Auto-generated method stub

		Connection geconn = ConnectionFactory.getConnection();
		
		String sql_visitors = "Select * from GE_VISITORS where date(CREATED_BY)= date(now())";
		
		try {
			Statement st = geconn.createStatement();
			ResultSet rs = st.executeQuery(sql_visitors);
		
			ArrayList ary_visitors = new ArrayList();
			
			VisitorsForm visitorsForm1 =null;
			while(rs.next()) {
				visitorsForm1=new VisitorsForm();
				visitorsForm1.setVisName(rs.getString("VISITOR_NAME"));
				visitorsForm1.setVisCompany(rs.getString("COMPANY"));
				visitorsForm1.setVisPlace(rs.getString("PLACE"));
				visitorsForm1.setTimeIn(rs.getString("TIME_IN"));
				visitorsForm1.setTimeOut(rs.getString("TIME_OUT"));
				visitorsForm1.setVisitorno(rs.getInt("VISITOR_NO"));
				
				ary_visitors.add(visitorsForm1);
				
			}
			//visitorsForm1.setAry_visitors(ary_visitors);
			request.setAttribute("disvisitors", ary_visitors);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return mapping.findForward("displayvisitors");
	
	}
	
	public ActionForward display(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		VisitorsForm visitorsForm = (VisitorsForm) form;// TODO Auto-generated method stub
		
		visitorsForm.setVisDate(MicrolabsUtils.getSysDate());
		//visitorsForm.setTimeIn(MicrolabsUtils.getSysTime());
		HttpSession session=request.getSession();
		Connection geconn = ConnectionFactory.getConnection();
		
		String addview = request.getParameter("id");
		String exportType = request.getParameter("exportType");
		String location = (String)session.getAttribute("LocationName");
		String locationid = (String)session.getAttribute("Locationid");
		
		try {
			Statement st = geconn.createStatement();
			
			cleardata(mapping, form, request, response);
			VisitorsDB vi=new VisitorsDB();
			if (addview == null){
			
			ArrayList a1=vi.getVisitors(locationid);
			
			request.setAttribute("disvisitors", a1);
			}
			visitorsForm.setVistypelist(vi.getvistypelist());
			visitorsForm.setVispurposelist(vi.getvispurposelist());
			visitorsForm.setDeptlist(vi.getdeptlist());
			
			if (exportType != null && exportType.trim().length() > 0 ) {
				if ( exportType.equals("XLS")) {
					
				}
			}
			
			
	} catch (SQLException e) {
			e.printStackTrace();
	}
		
		return mapping.findForward("display");
		
	}

	public ActionForward exportDisplay(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HashMap<String, String> contentTypeMap = new HashMap<String, String>();
		contentTypeMap.put("XLS", "<%@ page contentType=\"application/vnd.ms-excel\" pageEncoding=\"UTF-8\" %>");
		contentTypeMap.put("DOC", "<%@ page contentType=\"application/msword\" pageEncoding=\"UTF-8\" %>");
		contentTypeMap.put("XML", "<%@ page contentType=\"text/xml\" pageEncoding=\"UTF-8\" %>");
		
		String locationid = (String) request.getSession().getAttribute("Locationid");
		ArrayList visitorList = new VisitorsDB().getVisitors(locationid);
		request.setAttribute("visitorList", visitorList);
		
		String exportType = request.getParameter("exportType");
			
		if (exportType != null && exportType.trim().length() > 0 ) {
			request.setAttribute("contentType", contentTypeMap.get(exportType));
 		}
				
		return mapping.findForward("visitorList");
		
	}
	
	
	public ActionForward cleardata(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		VisitorsForm visitorsForm = (VisitorsForm) form;// TODO Auto-generated method stub
		
		
		visitorsForm.setVisType("Select");
		visitorsForm.setVisPurpose("Select");
		visitorsForm.setDeptType("Select");
		
		visitorsForm.setVisName("");
		visitorsForm.setVisCompany("");
		visitorsForm.setAddress("");
		visitorsForm.setVisPlace("");
		visitorsForm.setVisContact("");
		visitorsForm.setBelongings("");
		visitorsForm.setNopersons(1);
		visitorsForm.setPersonnames("");
		visitorsForm.setToMeet("");	
		visitorsForm.setVisitorimage("images/visitors/noimage.jpg");
		return null;
	
	}	

	public ActionForward submit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		VisitorsForm visitorsForm = (VisitorsForm) form;// TODO Auto-generated method stub
		
		visitorsForm.setVisDate(MicrolabsUtils.getSysDate());
		visitorsForm.setTimeIn(MicrolabsUtils.getSysTime());
		
		 HttpSession session = request.getSession();
		 String gateno = (String)session.getAttribute("GateNo");
		 String username = (String)session.getAttribute("UserName");
		 String location = (String)session.getAttribute("LocationName");
		 String locationid = location.substring(0,location.lastIndexOf("-"));
		 
		 String finYear=visitorsForm.getFinYear();
		 String visType=visitorsForm.getVisType();
		 String visPurpose=visitorsForm.getVisPurpose();
		 String visName=visitorsForm.getVisName();
		 String visCompany=visitorsForm.getVisCompany();
		 String address=visitorsForm.getAddress();
		 String visPlace=visitorsForm.getVisPlace();
		 String visContact=visitorsForm.getVisContact();
		 String belongings=visitorsForm.getBelongings();
		 int nopersons= visitorsForm.getNopersons();
		 String personnames = visitorsForm.getPersonnames();
		 String toMeet=visitorsForm.getToMeet();
		 String deptType=visitorsForm.getDeptType();
		 String timeIn=visitorsForm.getTimeIn();
		 String visitorimage = visitorsForm.getVisitorimage();
		 
		 //String timeOut=visitorsForm.getTimeOut();
		 try {
			 
			 Connection geconn = ConnectionFactory.getConnection();
				Statement st = geconn.createStatement();
		 String sql1="select max(VISITOR_NO) as VISITOR_NO from GE_VISITORS";
		 
		 ResultSet rs1 = st.executeQuery(sql1);
		 int visitor_no=1;
		 if (rs1.next())
		 {
			 visitor_no=rs1.getInt("VISITOR_NO")+1;
		 }
		 
		 String sql="insert into GE_VISITORS (GATE_NO,"+
					"FIN_YEAR,"+
					"LOCATION_ID,"+
					"VISITOR_NO,"+
					"VIS_TYPE_ID,"+
					"VIS_PURPOSE_ID, "+
					"VISITOR_NAME, "+
					"COMPANY, "+
					"ADDRESS, "+
					"PLACE, "+
					"CONTACT_NO, "+
					"BELONGINGS, "+
					"NO_PERSONS, "+
					"PERSON_NAMES, "+
					"TO_MEET, "+
					"DEPT_ID,"+
					"TIME_IN,"+
					"VISITOR_IMAGE, "+
					"CREATED_BY, "+
					"CREATED_DATE) values ('"+gateno+"','"+finYear+"','"+locationid+"','"+visitor_no+"','"+visType+"','"+visPurpose+"','"+visName+"'," +
							"'"+visCompany+"','"+address+"','"+visPlace+"','"+visContact+"','"+belongings+"','"+nopersons+"','"+personnames+"'," +
							"'"+toMeet+"','"+deptType+"','"+timeIn+"','"+visitorimage+"','"+username+"'," +
									"'"+MicrolabsUtils.getmssqldatetime()+"')";
			
		 			System.out.println(sql);
					int insert = st.executeUpdate(sql);

					if (insert>0){
						
						cleardata(mapping, form, request, response);
						visitorsForm.setMessage("Visitor Details saved Successfully...");
					}else {
						visitorsForm.setMessage("Error while saving details...");
					}
					VisitorsDB vi=new VisitorsDB();
					
					visitorsForm.setVistypelist(vi.getvistypelist());
					visitorsForm.setVispurposelist(vi.getvispurposelist());
					visitorsForm.setDeptlist(vi.getdeptlist());
			}catch (Exception e) {
				e.printStackTrace();
			}
			//return display(mapping, form, request, response);
		return mapping.findForward("display");
		
	}

	public ActionForward vissearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		VisitorsForm visitorsForm = (VisitorsForm) form;// TODO Auto-generated method stub
		
		visitorsForm.setVisDate(MicrolabsUtils.getSysDate());
		//visitorsForm.setTimeIn(MicrolabsUtils.getSysTime());
		HttpSession session=request.getSession();
		Connection geconn = ConnectionFactory.getConnection();
		
		String addview = request.getParameter("id");
		String location = (String)session.getAttribute("LocationName");
		String locationid = (String)session.getAttribute("Locationid");
		String vissrch = visitorsForm.getVisSearch();
		
		try {
			Statement st = geconn.createStatement();
			
			cleardata(mapping, form, request, response);

			VisitorsDB vi=new VisitorsDB();
			ArrayList a1=vi.getVisitorssearch(locationid,vissrch);
			
			
				request.setAttribute("disvisitors", a1);
			
			
	} catch (SQLException e) {
			e.printStackTrace();
	}
		
		return mapping.findForward("display");
		
	}
	
	
	
}